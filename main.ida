seg000:0000 ;
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
seg000:0000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
seg000:0000 ; |                      License info: 48-B611-7234-BB                      |
seg000:0000 ; |             Doskey Lee, Kingsoft Internet Security Software             |
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ;
seg000:0000 ; Input MD5   : 962002CA65D91D9C099C7862795B1827
seg000:0000 ; Input CRC32 : 82FCD604
seg000:0000
seg000:0000 ; ---------------------------------------------------------------------------
seg000:0000 ; File Name   : C:\Documents and Settings\youben\Bureau\main.bin
seg000:0000 ; Format      : Binary file
seg000:0000 ; Base Address: 0000h Range: 0000h - 0200h Loaded length: 0200h
seg000:0000
seg000:0000                 .686p
seg000:0000                 .mmx
seg000:0000                 .model flat
seg000:0000
seg000:0000 ; ===========================================================================
seg000:0000
seg000:0000 ; Segment type: Pure code
seg000:0000 seg000          segment byte public 'CODE' use16
seg000:0000                 assume cs:seg000
seg000:0000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg000:0000                 mov     ax, 13h
seg000:0003                 int     10h             ; - VIDEO - SET VIDEO MODE
seg000:0003                                         ; AL = mode
seg000:0005                 mov     eax, cr0
seg000:0008                 and     ax, 0FFFBh
seg000:000B                 or      ax, 2
seg000:000E                 mov     cr0, eax
seg000:0011                 mov     eax, cr4
seg000:0014                 or      ax, 600h
seg000:0017                 mov     cr4, eax
seg000:001A                 mov     word ptr ds:1266h, 0Ah
seg000:0020                 mov     bx, 0
seg000:0023
seg000:0023 loc_23:                                 ; CODE XREF: seg000:002Cj
seg000:0023                 mov     byte ptr [bx+1234h], 5Fh ; '_'
seg000:0028                 inc     bx
seg000:0029                 cmp     bx, 15h
seg000:002C                 jle     short loc_23
seg000:002E                 mov     byte ptr ds:7DC8h, 0
seg000:0033
seg000:0033 loc_33:                                 ; CODE XREF: seg000:00F3j
seg000:0033                                         ; seg000:010Aj ...
seg000:0033                 mov     cx, 1
seg000:0036                 xor     dx, dx
seg000:0038
seg000:0038 loc_38:                                 ; CODE XREF: seg000:00DCj
seg000:0038                 mov     ah, 86h ; 'Ã¥'
seg000:003A                 int     15h             ; SYSTEM - WAIT (AT,XT2,XT286,CONV,PS)
seg000:003A                                         ; CX,DX = number of microseconds to wait
seg000:003A                                         ; Return: CF clear: after wait elapses, CF set: immediately due to error
seg000:003C                 add     byte ptr ds:1278h, 10h ; DATA XREF: seg000:0003r
seg000:003C                                         ; seg000:0053r ...
seg000:0041                 mov     ax, 1300h
seg000:0044                 mov     bh, 0
seg000:0046                 mov     bl, ds:1278h
seg000:004A                 mov     cx, 10h
seg000:004D                 mov     dx, 90Ch
seg000:0050                 mov     bp, 7D60h
seg000:0053                 int     10h             ; DATA XREF: seg000:003Ar
seg000:0053                                         ; - VIDEO - WRITE STRING (AT,XT286,PS,EGA,VGA)
seg000:0053                                         ; AL = mode, BL = attribute if AL bit 1 clear, BH = display page number
seg000:0053                                         ; DH,DL = row,column of starting cursor position, CX = length of string
seg000:0053                                         ; ES:BP -> start of string
seg000:0055                 mov     ax, 1300h
seg000:0058
seg000:0058 loc_58:                                 ; DATA XREF: seg000:010Fr
seg000:0058                                         ; seg000:0115r
seg000:0058                 mov     bx, 0Fh
seg000:005B                 mov     cx, 14h
seg000:005E                 mov     dx, 0C0Ah
seg000:0061                 mov     bp, 1234h
seg000:0064                 int     10h             ; - VIDEO - WRITE STRING (AT,XT286,PS,EGA,VGA)
seg000:0064                                         ; AL = mode, BL = attribute if AL bit 1 clear, BH = display page number
seg000:0064                                         ; DH,DL = row,column of starting cursor position, CX = length of string
seg000:0064                                         ; ES:BP -> start of string
seg000:0066                 cmp     byte ptr ds:7DC8h, 13h
seg000:006B                 jle     loc_10D
seg000:006F                 cmp     dword ptr ds:1234h, 67616C66h
seg000:0078                 jnz     loc_14D
seg000:007C                 movaps  xmm0, xmmword ptr ds:1238h
seg000:0081                 movaps  xmm5, xmmword ptr ds:7C00h
seg000:0086                 pshufd  xmm0, xmm0, 1Eh
seg000:008B                 mov     si, 8
seg000:008E
seg000:008E loc_8E:                                 ; CODE XREF: seg000:00C1j
seg000:008E                 movaps  xmm2, xmm0
seg000:0091                 andps   xmm2, xmmword ptr [si+7D90h]
seg000:0096                 psadbw  xmm5, xmm2
seg000:009A                 movaps  xmmword ptr ds:1268h, xmm5
seg000:009F                 mov     di, ds:1268h
seg000:00A3                 shl     edi, 10h
seg000:00A7                 mov     di, ds:1270h
seg000:00AB                 mov     dx, si
seg000:00AD                 dec     dx
seg000:00AE                 add     dx, dx
seg000:00B0                 add     dx, dx
seg000:00B2                 cmp     edi, [edx+7DA8h]
seg000:00BA                 jnz     loc_14D
seg000:00BE                 dec     si
seg000:00BF                 test    si, si
seg000:00C1                 jnz     short loc_8E
seg000:00C3                 mov     byte ptr ds:1278h, 0Ah
seg000:00C8                 mov     bx, ds:1266h
seg000:00CC                 mov     di, 7D70h
seg000:00CF                 test    bx, bx
seg000:00D1                 jz      short loc_DF
seg000:00D3                 dec     word ptr ds:1266h
seg000:00D7                 xor     cx, cx
seg000:00D9                 mov     dx, 14h
seg000:00DC                 jmp     loc_38
seg000:00DF ; ---------------------------------------------------------------------------
seg000:00DF
seg000:00DF loc_DF:                                 ; CODE XREF: seg000:00D1j
seg000:00DF                                         ; seg000:0155j
seg000:00DF                 mov     byte ptr ds:7C3Dh, 0
seg000:00E4                 mov     word ptr ds:1266h, 0Ah
seg000:00EA                 xor     bh, bh
seg000:00EC                 mov     bl, ds:7DC9h
seg000:00F0                 cmp     bx, 10h
seg000:00F3                 jge     loc_33
seg000:00F7                 mov     cl, [bx+di]
seg000:00F9                 mov     [bx+7D60h], cl
seg000:00FD                 inc     byte ptr ds:7DC9h
seg000:0101                 mov     dword ptr [bx+7D61h], 3E3D3D20h
seg000:010A                 jmp     loc_33
seg000:010D ; ---------------------------------------------------------------------------
seg000:010D
seg000:010D loc_10D:                                ; CODE XREF: seg000:006Bj
seg000:010D                 mov     ah, 1
seg000:010F                 int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
seg000:010F                                         ; Return: ZF clear if character in buffer
seg000:010F                                         ; AH = scan code, AL = character
seg000:010F                                         ; ZF set if no character in buffer
seg000:0111                 jz      short loc_14A
seg000:0113                 xor     ah, ah
seg000:0115                 int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
seg000:0115                                         ; Return: AH = scan code, AL = character
seg000:0117                 cmp     al, 8
seg000:0119                 jz      short loc_131
seg000:011B                 cmp     al, 0Dh
seg000:011D                 jz      short loc_14A
seg000:011F                 mov     bx, 1234h
seg000:0122                 mov     cl, ds:7DC8h
seg000:0126                 add     bx, cx
seg000:0128                 mov     [bx], al
seg000:012A                 inc     byte ptr ds:7DC8h
seg000:012E                 jmp     loc_33
seg000:0131 ; ---------------------------------------------------------------------------
seg000:0131
seg000:0131 loc_131:                                ; CODE XREF: seg000:0119j
seg000:0131                 cmp     byte ptr ds:7DC8h, 1
seg000:0136                 jl      loc_33
seg000:013A                 mov     ax, 1234h
seg000:013D                 dec     byte ptr ds:7DC8h
seg000:0141                 mov     bl, ds:7DC8h
seg000:0145                 add     bx, ax
seg000:0147                 mov     byte ptr [bx], 5Fh ; '_'
seg000:014A
seg000:014A loc_14A:                                ; CODE XREF: seg000:0111j
seg000:014A                                         ; seg000:011Dj
seg000:014A                 jmp     loc_33
seg000:014D ; ---------------------------------------------------------------------------
seg000:014D
seg000:014D loc_14D:                                ; CODE XREF: seg000:0078j
seg000:014D                                         ; seg000:00BAj
seg000:014D                 mov     byte ptr ds:1278h, 4
seg000:0152                 mov     di, 7D80h
seg000:0155                 jmp     short loc_DF
seg000:0155 ; ---------------------------------------------------------------------------
seg000:0157                 align 10h
seg000:0160                 db  3Dh ; =
seg000:0161                 db  3Dh ; =
seg000:0162                 db  20h
seg000:0163                 db 45h, 4Eh, 54h, 45h, 52h, 20h, 46h, 4Ch, 41h, 47h, 20h
seg000:0163                 db 2 dup(3Dh), 3 dup(0AFh), 20h, 43h, 4Fh, 2 dup(52h)
seg000:0163                 db 45h, 43h, 54h, 21h, 20h, 3 dup(0AEh), 2 dup(21h), 20h
seg000:0163                 db 57h, 52h, 4Fh, 4Eh, 47h, 20h, 46h, 4Ch, 41h, 47h, 20h
seg000:0163                 db 2 dup(21h), 8 dup(0FFh), 0, 7 dup(0FFh), 0, 7 dup(0FFh)
seg000:0163                 db 70h, 2, 11h, 2, 55h, 2, 29h, 2, 91h, 2, 5Eh, 2, 33h
seg000:0163                 db 2, 0F9h, 1, 78h, 2, 7Bh, 2, 21h, 2, 9, 2, 5Dh, 2, 90h
seg000:0163                 db 2, 8Fh, 2, 0DFh, 2, 36h dup(0), 55h, 0AAh
seg000:0163 seg000          ends
seg000:0163
seg000:0163
seg000:0163                 end
